package ${package}.controller;

import cms.lrkj.annotation.Log;
import cms.lrkj.constant.SysConstant;
import ${package}.core.*;
import ${package}.model.${className};
import ${package}.service.${className}Service;
import cms.lrkj.core.ApiResult;
import cms.lrkj.exception.GlobalException;
import cms.lrkj.utils.StringUtil;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.TypeReference;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.stereotype.Controller;
import org.springframework.context.annotation.Scope;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Map;

import static org.springframework.beans.factory.config.BeanDefinition.SCOPE_PROTOTYPE;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */

@RestController
@RequestMapping("/${platformUrl}")
@Scope(SCOPE_PROTOTYPE)
public class ${platFormUrl}${className}Controller extends AbstractBaseController {

    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 列表
     */
    @RequestMapping("/${classname}/list.do")
#if (${platformUrl} == "admin")
    @Log("${platformUrl}/${classname}:列表")
#end
    public ApiResponse list(ApiRequest apiRequest) {
        Map param = getReqMap(apiRequest);
        int page = getPage(param);
        int pageSize = getPageSize(param);

        RespPageInfo pageInfo = ${classname}Service.pageList(param, page, pageSize);

        return ApiResponse.getDefaultResponse(pageInfo);
    }

    /**
     * 保存
     */
    @RequestMapping("/${classname}/save.do")
#if (${platformUrl} == "admin")
    @Log("${platformUrl}/${classname}:保存")
#end
    public ApiResponse save(ApiRequest apiRequest) {
        ${className} ${classname} =JSON.parseObject(apiRequest.getData(), ${className}.class);

        int flag = ${classname}Service.save(${classname});
        if (flag <= 0) {
            throw new GlobalException(ApiResult.FAILURE_UPDATE);
        }

        return ApiResponse.getDefaultResponse();
    }

    /**
     * 修改
     */
    @RequestMapping("/${classname}/update.do")
#if (${platformUrl} == "admin")
    @Log("${platformUrl}/${classname}:修改")
#end
    public ApiResponse update(ApiRequest apiRequest) {
        ${className} ${classname} =JSON.parseObject(apiRequest.getData(), ${className}.class);

        int flag = ${classname}Service.update(${classname});
        if (flag <= 0) {
            throw new GlobalException(ApiResult.FAILURE_UPDATE);
        }

        return ApiResponse.getDefaultResponse();
    }

    /**
     * 详情
     */
    @RequestMapping("/${classname}/detail.do")
#if (${platformUrl} == "admin")
    @Log("${platformUrl}/${classname}:详情")
#end
    public ApiResponse detail(ApiRequest apiRequest) {
        Map param = getReqMap(apiRequest);
        Long id = getMapLong(param.get("id"));

        if (id <= 0) {
            throw new GlobalException(ApiResult.PARAM_ERROR);
        }

        ${className} ${classname} = ${classname}Service.findById(id);

        return ApiResponse.getDefaultResponse(${classname});
    }

    /**
     * 删除
     */
    @RequestMapping("/${classname}/delete.do")
#if (${platformUrl} == "admin")
    @Log("${platformUrl}/${classname}:删除")
#end
    public ApiResponse delete(ApiRequest apiRequest) {
        Map param = getReqMap(apiRequest);
        Long id = getMapLong(param.get("id"));

        if (id <= 0) {
            throw new GlobalException(ApiResult.PARAM_ERROR);
        }

        int flag = ${classname}Service.delete(id);
        if (flag <= 0) {
            throw new GlobalException(ApiResult.FAILURE_UPDATE);
        }

        return ApiResponse.getDefaultResponse();
    }

    /**
     * 批量删除
     */
    @RequestMapping("/${classname}/batchDelete.do")
#if (${platformUrl} == "admin")
    @Log("${platformUrl}/${classname}:批量删除")
#end
    public ApiResponse batchDelete(ApiRequest apiRequest) {
        Map param = getReqMap(apiRequest);
        String idsStr = getMapString(param, "ids");

        if (StringUtil.isEmpty(idsStr)) {
            throw new GlobalException(ApiResult.PARAM_ERROR);
        }

        String[] ids = idsStr.split(",");
        int flag = ${classname}Service.batchDelete(${pk.attrname}s);
        if (flag <= 0) {
            throw new GlobalException(ApiResult.FAILURE_UPDATE);
        }

        return ApiResponse.getDefaultResponse();
    }

}
